name: Build and deploy Server and Client

on:
  push:
    branches:
      - main

jobs:
  build_and_export:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        lfs: 'true'

    - name: Install .NET 7.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '7.0.x'

    - name: Install Godot Engine
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip
        wget https://github.com/godotengine/godot-builds/releases/download/4.2.1-stable/Godot_v4.2.1-stable_mono_linux_x86_64.zip
        unzip Godot_v4.2.1-stable_mono_linux_x86_64
        chmod +x Godot_v4.2.1-stable_mono_linux_x86_64/Godot_v4.2.1-stable_mono_linux.x86_64
        sudo mv Godot_v4.2.1-stable_mono_linux_x86_64/GodotSharp /usr/local/bin/GodotSharp
        sudo mv Godot_v4.2.1-stable_mono_linux_x86_64/Godot_v4.2.1-stable_mono_linux.x86_64 /usr/local/bin/godot

    - name: Unzip templates and move them
      run: |
        mkdir -p ~/.local/share/godot/export_templates
        unzip Templates/data.zip -d ~/.local/share/godot/export_templates

    - name: Install NuGet Packages
      run: |
        dotnet add Game/Mdmc.csproj package com.playfab.csharpgsdk --version 0.11.210519
        dotnet add Game/Mdmc.csproj package Facepunch.Steamworks --version 2.3.3
        dotnet add Game/Mdmc.csproj package LiteDB --version 5.0.17
        dotnet add Game/Mdmc.csproj package PlayFabAllSDK --version 1.174.240119
        dotnet add Game/Mdmc.csproj package SmartFormat.NET --version 3.3.0

    - name: Build and Export Server
      run: |
        mkdir -p ${{ github.workspace }}/bin/Server
        godot --headless --export-debug LinuxServer Game/project.godot ${{ github.workspace }}/bin/Server/mdmc_server.x86_64

    - name: Build and Export Client
      run: |
        mkdir -p ${{ github.workspace }}/bin/Client
        godot --headless --export-release Client Game/project.godot ${{ github.workspace }}/bin/Client/mdmc.exe


    - name: Zip Exported Files
      run: |
        zip -r -j server.zip ${{ github.workspace }}/bin/Server/
        zip -r -j client.zip ${{ github.workspace }}/bin/Client/
        ls

    - name: DOCKER
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.PLAYFAB_DOCKER_REPO }}.azurecr.io
        username: ${{ secrets.PLAYFAB_DOCKER_REPO }}
        password: ${{ secrets.PLAYFAB_DOCKER_REPO_PASS }}      
      
    - name: Do the docker things
      run: |
        docker build -t ${{ secrets.PLAYFAB_DOCKER_REPO }}.azurecr.io/mdmc:latest -f .docker/dockerfile.playfab .
        docker push ${{ secrets.PLAYFAB_DOCKER_REPO }}.azurecr.io/mdmc:latest      
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
            Trying out creating a release.
        draft: false
        prerelease: false
  
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./client.zip
        asset_name: mdmc.zip
        asset_content_type: application/zip

